import { Context, Bot } from "grammy";

const commandCooldowns = new Map<string, number>(); // –∫–ª—é—á ‚Äî `${userId}:${command}`

// –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –∫—Ç–æ –æ–∂–∏–¥–∞–µ—Ç —á–∏—Å–ª–æ
const waitingForRandomInput = new Map<number, true>();

export function setupRandomCommand(bot: Bot) {
  // /random
  bot.command("random", async (ctx: Context) => {
     const userId = ctx.from?.id;
    if (!userId) return;

    const key = `${userId}:random`;
    const now = Date.now();

    if (commandCooldowns.has(key)) {
      const lastTime = commandCooldowns.get(key)!;
      const diff = now - lastTime;
      const cooldownMs = 60_000; // 1 –º–∏–Ω—É—Ç–∞
      if (diff < cooldownMs) {
        const remainingSec = Math.ceil((cooldownMs - diff) / 1000);
        return ctx.reply(`‚è± –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${remainingSec} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã.`);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    commandCooldowns.set(key, now);
    
      setTimeout(async () => {
    try {
      await ctx.deleteMessage();
    } catch (err) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", err);
    }
  }, 3000);
    waitingForRandomInput.set(ctx.from!.id, true);
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 2):");
    // –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
  });

  // –ª–æ–≤–∏–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  bot.on("message:text", async (ctx: Context) => {
    if (!ctx.from) return;

    // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
    if (waitingForRandomInput.has(ctx.from.id)) {
      const text = ctx.msg!.text!.trim();
      const num = Number(text);

      // –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º)
      if (isNaN(num)) {
        return; // –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
      }

      // –µ—Å–ª–∏ —á–∏—Å–ª–æ, –Ω–æ < 2 ‚Äî –≥–æ–≤–æ—Ä–∏–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
      if (num < 2) {
        await ctx.reply("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ‚â• 2. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:");
        return; // –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
      }

      // —á–∏—Å–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ ‚Äî —É–±–∏—Ä–∞–µ–º –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è
      waitingForRandomInput.delete(ctx.from.id);

      await ctx.reply("–î–æ—Å—Ç–∞—ë–º –∫–æ—Ç–∞ —Å –º–µ—à–∫–∞...");

      setTimeout(async () => {
        const random = Math.floor(Math.random() * num) + 1;
        await ctx.reply(`üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: ${random}`);
      }, 3000);
    }
  });
}
